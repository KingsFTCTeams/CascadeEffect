#pragma config(Hubs,  S2, HTMotor,  HTMotor,  none,     none)
#pragma config(Hubs,  S4, HTMotor,  HTServo,  none,     none)
#pragma config(Sensor, S2,     ,               sensorI2CMuxController)
#pragma config(Sensor, S4,     ,               sensorI2CMuxController)
#pragma config(Motor,  mtr_S2_C1_1,     ArmJ2,         tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S2_C1_2,     ArmJ1,         tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S2_C2_1,     Turntable,     tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S2_C2_2,     LeftDrive,     tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S4_C1_1,     Nothing,       tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S4_C1_2,     RightDrive,    tmotorTetrix, openLoop, encoder)
#pragma config(Servo,  srvo_S4_C2_1,    servo1,               tServoNone)
#pragma config(Servo,  srvo_S4_C2_2,    servo2,               tServoNone)
#pragma config(Servo,  srvo_S4_C2_3,    servo3,               tServoNone)
#pragma config(Servo,  srvo_S4_C2_4,    servo4,               tServoStandard)
#pragma config(Servo,  srvo_S4_C2_5,    servo5,               tServoStandard)
#pragma config(Servo,  srvo_S4_C2_6,    servo6,               tServoStandard)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#define TEAM_NUMBER 5076

#pragma systemFile            // this eliminates warning for "unreferenced" functions

#include "../Common/GlobalDefines.h"
#include "JoystickDriver.c"
#include "Includes/TeamConfig.h"
#include "../Common/Control/ArmKinematics.h"
#include "../Common/Control/ArmControl.h"
int J1_1 = 0;
int J2_1 = 0;
int Z1 = 0;
int Z2 = 0;
int Y1 = 0;
int Y2 = 0;
int J1z = 0;
int J2z = 0;
int J1_2 = 0;
int J2_2 = 0;
int Y = 0;
int Z = 0;

task main()
{
	long pTime = 0;
	int motorGoalPosJ1 = 0;
	float motorGoalPosJ2 = ARM_J2_JCS_OFFSET_DEG;
	float motorGoalPos = 0;
	int servoGoalPos = 0;
	int servoDelta = 35;
	servo[servo5] = 180;

	eraseDisplay();

	nxtDisplayTextLine(3, "initializing...");

	StartTask(ArmControlTask);
	wait1Msec(2000);

	while (true)
	{
		getJoystickSettings(joystick);
		long g1 = ReadArmJointGoal(1);
		long g2 = ReadArmJointGoal(2);
		long g3 = ReadArmJointGoal(3);
		long g4 = ReadArmJointGoal(4);
		long g5 = ReadArmJointGoal(5);

		long a1 = ReadArmJointAngle(1);
		long a2 = ReadArmJointAngle(2);
		long a3 = ReadArmJointAngle(3);
		long a4 = ReadArmJointAngle(4);
		long a5 = ReadArmJointAngle(5);

		nxtDisplayTextLine(0, "J1: %d/%d/%d", g1, a1, (g1-a1));
		nxtDisplayTextLine(1, "J2: %d/%d/%d", g2, a2, (g2-a2));
		nxtDisplayTextLine(2, "J3: %d/%d/%d", g3, a3, (g3-a3));
		nxtDisplayTextLine(3, "J4: %d/%d (%d)", g4, a4, servoDelta);
		nxtDisplayTextLine(4, "J5: %d/%d (%d)", g5, a5, servoDelta);

		//ArmJoint_MoveToPosAtRate(2, -120, 90.0);

		/*
		J1_1 = ReadArmJointAngle(1);
		J2_1 = ReadArmJointAngle(2);



		//where we are
		Z = (J1z*cos(J1_1))+(J2z*cos(J2_1-J1_1));
		Y = (J1z*cos(J1_1))+(J2z*cos(J2_1-J1_1));

		//where we need to go
		J1_2 = acos(Z1/J1z);
		J2_2 = acos(Z2/J2z)+J1z;

		if (joystick.joy1_y1 > 10 || joystick.joy1_y1 < -10)
		{
		ArmJoint_MoveToPosAtRate(1, J1_2, 90.0);
		}
		else
		{
		ArmJoint_Hold(1);
		}

		if (joystick.joy1_y2 > 10 || joystick.joy1_y2 < -10)
		{
		ArmJoint_MoveToPosAtRate(2, J2_2, 90.0);
		}
		else
		{
		ArmJoint_Hold(2);
		}





		*/


		if (joystick.joy1_y1 > 10)
		{
			ArmJoint_MoveToPosAtRate(1, ARM_J1_MAX_POS, 90.0);
		}
		else if (joystick.joy1_y1 < -10)
		{
			ArmJoint_MoveToPosAtRate(1, ARM_J1_MIN_POS, 90.0);
		}
		else
		{
			ArmJoint_Hold(1);
		}

		if (joystick.joy1_y2 > 10)
		{
			ArmJoint_MoveToPosAtRate(2, ARM_J2_MAX_POS, 90.0);
		}
		else if (joystick.joy1_y2 < -10)
		{
			ArmJoint_MoveToPosAtRate(2, ARM_J2_MIN_POS, 90.0);
		}
		else
		{
			ArmJoint_Hold(2);
		}

		if (joystick.joy1_TopHat == 0)//wrist up
		{
			servo[servo5] += 1;
		}

		if (joystick.joy1_TopHat == 4)//wrist down
		{
			servo[servo5] -= 1;
		}

		if (joy1Btn(08))
		{
			motor[Turntable] = 20;
		}
		else if (joy1Btn(07))
		{
			motor[Turntable] = -20;
		}
		else
		{
			motor[Turntable] = 0;
		}

		if (joy2Btn(01) && (joystick.joy2_y2 <= 10 || joystick.joy2_y2 >= -10))
		{
			motor[RightDrive] = joystick.joy2_y2*-1;
		}
		else if(joystick.joy2_y2 >= 10 || joystick.joy2_y2 <= -10)
		{
			motor[RightDrive] = joystick.joy2_y2*-0.4;
		}
		else
		{
			motor[RightDrive] = 0;
		}

		if (joy2Btn(01) && (joystick.joy2_y1 <= 10 || joystick.joy2_y1 >= -10))
		{
			motor[LeftDrive] = joystick.joy2_y1*1;
		}
		else if(joystick.joy2_y1 >= 10 || joystick.joy2_y1 <= -10)
		{
			motor[LeftDrive] = joystick.joy2_y1*0.4;
		}
		else
		{
			motor[LeftDrive] = 0;
		}
	}
}
